pwd
par(mfrow=c(1,2))#
with(iris, boxplot(Sepal.Length))#
with(iris, plot(Sepal.Length ~ Species))
par(mfrow=c(2,1))#
with(iris, boxplot(Sepal.Length))#
with(iris, plot(Sepal.Length ~ Species))
par(mfrow=c(1,2))#
with(iris, boxplot(Sepal.Length))#
with(iris, plot(Sepal.Length ~ Species))
require(dplyr)#
require(magrittr)#
require(ggplot2)
dat <- cbind(iris, id = 1:length(iris$Species))#
yhat <- mean(iris$Sepal.Length)  # grand mean of Sepal Length#
#
p <- dat %>% ggplot(aes( x = id, y = Sepal.Length, group=Species)) #
#
q <- p + geom_point( size=2) + #
  geom_hline( aes(yintercept = mean(iris$Sepal.Length)) ) + #
  geom_segment( data=dat, aes( x = id, y = Sepal.Length, xend = id, yend = yhat), color="red", lty = 3)#
#
q
dat <- cbind(iris, id = 1:length(iris$Species))#
yhat <- mean(iris$Sepal.Length)  # grand mean of Sepal Length#
#
p <- dat %>% ggplot(aes( x = id, y = Sepal.Length, group=Species)) #
#
q <- p + geom_point(col=Species, size=2) + #
  geom_hline( aes(yintercept = mean(iris$Sepal.Length)) ) + #
  geom_segment( data=dat, aes( x = id, y = Sepal.Length, xend = id, yend = yhat), color="red", lty = 3) + scale_color_manual(Species)#
#
q
iris$id <- 1:150
with(iris, Sepal.Length ~ id)
with(iris, plot(Sepal.Length ~ id))
par()
par(1)
with(iris, plot(Sepal.Length ~ id))
slm <- mean(iris$Sepal.Length)
iris$slm <- slm
iris$slerr <- iris$Sepal.Length - iris$slm
head(iris)
lines(iris$slerr)
plot(lines(iris$id iris$slerr))
abline(iris$Sepal.Length)
abline?
abline(iris$Sepal.Length)
require(dplyr)#
require(magrittr)#
require(ggplot2)#
#
dat <- cbind(iris, id = 1:length(iris$Species))#
yhat <- mean(iris$Sepal.Length)  # grand mean of Sepal Length#
#
p <- dat %>% ggplot(aes( x = id, y = Sepal.Length, group=Species)) #
#
q <- p + geom_point( size=2) + #
  geom_hline( aes(yintercept = mean(iris$Sepal.Length)) ) + #
  geom_segment( data=dat, aes( x = id, y = Sepal.Length, xend = id, yend = yhat), color="red", lty = 3)#
#
q
spmeans  <- dat %>% group_by(Species) %>% #
        summarise(#
          sl = mean(Sepal.Length),#
          n = length(Sepal.Length),#
          minid = min(id),#
          maxid = max(id)#
        )#
#
spmeans
merge(dat, spmeans)
head(dat)
dat <- merge(dat, spmeans)
head(dat)
dat[45:55]
dat[45:55,]
r <- p + geom_point( size=2) + #
  geom_segment( data=spmeans, aes(x=minid, y = sl, xend=maxid, yend=sl, group=Species )) + #
  geom_segment( data=dat, aes( x = id, y = Sepal.Length, xend = id, yend = sl, color=Species), lty = 3) #
#
r
require(cowplot)
plot_grid(#
  q, #
  r + theme(legend.position="none"), #
  labels="AUTO")
lm.fit <- with(iris, lm(Sepal.Length ~ Species))#
summary(lm.fit)
anova(lm.fit)
pc.iris <- princomp (~ .-Species, data=iris, scores=T)
summary(pc.iris)
loadings(pc.iris)
pc1 <- pc.iris$scores[,1]#
pc2 <- pc.iris$scores[,2]#
pc3 <- pc.iris$scores[,3]#
plot(pc2 ~ pc1, col=iris$Species, cex=2, pch=16)
plot(pc2 ~ pc1, col=iris$Species, cex=2, pch=16, ylim=c(-3, 4))
plot(pc3 ~ pc1, col=iris$Species, cex=2, pch=16, ylim=c(-3, 4))
manova.iris <- manova( cbind(pc1, pc2, pc3) ~ Species, data=iris)
summary(manova.iris)
summary(manova.iris, test="Wilks")
summary.aov(manova.iris)
install.packages("candisc")
iris.multiv <- lm( cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data=iris )#
iris.can <- candisc( iris.multiv, term="Species")#
iris.can
require(candisc)
iris.multiv <- lm( cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data=iris )#
iris.can <- candisc( iris.multiv, term="Species")#
iris.can
plot(iris.can, col=as.numeric(iris$Species))
?plot
iris.can$structure
x <- runif(n=1, min=0, max=10)  #
x
if(x > 6) {#
    y <- 10#
  } else if (x > 3){#
    y <- 5#
  } else { y <- 0 }#
x
y
x <- runif(n=1, min=0, max=10)  #
x
if(x > 6) {#
    y <- 10#
  } else if (x > 3){#
    y <- 5#
  } else { y <- 0 }#
x
y
if(x > 3) {#
    y <- 10#
  } else if (x > 6){#
    y <- 5#
  } else { y <- 0 }#
x
y
count <- 0#
while(count < 10) {#
        print(count)#
        count <- count + 1#
}
count <- 0#
while(count < 10000000) {#
        print(count)#
        count <- count + 1#
}
count <- 0#
while(count < 1) {#
        print(count)#
        count <- count + 1#
}
count <- 0#
while(count < -1) {#
        print(count)#
        count <- count + 1#
}
?set.seed
z <- 5#
set.seed(1)#
#
while(z >= 3 && z <= 10) {#
        coin <- rbinom(1, 1, 0.5)#
        if(coin == 1) {  ## random walk#
                z <- z + 1#
        } else {#
                z <- z - 1#
        } #
}#
print(z)
((-2:2) >= 0) & ((-2:2) <= 0)
2 >= 0
(2 >= 0) && (-2 <= 0)
(2 >= 0) & (-2 <= 0)
x0 <- 1#
tol <- 1e-8#
#
repeat {#
        x1 <- computeEstimate()#
        if(abs(x1 - x0) < tol) {  ## Close enough?#
                break#
        } else {#
                x0 <- x1#
        } #
}
?computeEstimate
??computeEstimate
x <- 10
tol <- .001
x
guess <- 2
x/guess #check if guess is correct
(guess+check)/2
check <- x/guess #check if guess is correct
(guess+check)/2
guess2 <- (guess+check)/2
guess <- guess2 #set guess for sqrt x#
check <- x/guess #check if guess is correct
check
guess <- guess2 #set guess for sqrt x#
check <- x/guess #check if guess is correct#
check
abs(x - guess2*guess2)
error <- abs(x - guess2*guess2)
guess <- guess2 #set guess for sqrt x#
check <- x/guess #check if guess is correct#
check
x <- 10 #read x#
tol <- .001 #read tolerance#
x #print x#
#
guess <- 2 #set guess for sqrt x#
check <- x/guess #check if guess is correct#
check
guess2 <- (guess+check)/2
error <= tol
if (error <= tol) x/newguess
x <- 9 #read x#
tol <- .0001 #read tolerance#
x #print x#
#
guess <- 10 #set guess for sqrt x#
check <- x/guess #check if guess is correct#
check
newguess <- (guess+check)/2
newguess
error <- abs(x - newguess*newguess)#
error
if (error <= tol) {guess <- newguess}
check <- x/guess #check if guess is correct#
check
guess
guess <- newguess
guess
check <- x/guess #check if guess is correct#
check
newguess <- (guess+check)/2#
newguess
error <- abs(x - newguess*newguess)#
error
guess <- newguess
check <- x/guess #check if guess is correct#
check
newguess <- (guess+check)/2#
newguess
error <- abs(x - newguess*newguess)#
error
guess <- newguess
check <- x/guess #check if guess is correct#
check
check <- x/guess #check if guess is correct#
check#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
newguess
error <- abs(x - newguess*newguess)#
error
while (error <= tol) {check <- x/guess #check if guess is correct#
check#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
newguess #
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
error#
}
while (error <= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
check#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
newguess #
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
error#
}
guess
while (error <= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
check#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
newguess #
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
error#
}
while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
check#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
newguess #
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
error#
}
guess
while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
check#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
newguess #
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
error#
}
guess
while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
}
guess
mysqrt <- function (x, tol= .0001) while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
}
mysqrt <- function (x, guess = x/2, tol= .0001) while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
}
mysqrt(100)
mysqrt <- function (x, guess = x/2, tol= .0001) while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
guess#
}
mysqrt(9)
guess
mysqrt(10)
guess
mysqrt <- function (x, guess = x/2, tol= .0001) {#
while (error >= tol) {#is error small enough?#
check <- x/guess #check if guess is correct#
#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+check)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
print(guess)#
}#
 return(guess)#
 }
mysqrt(x)
mysqrt(9)
mysqrt <- function (x, guess = x/2, tol= .0001) {#
while (error >= tol) {#is error small enough?#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+x/guess)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
print(guess)#
}#
 return(guess)#
 }
mysqrt(9)
newguess <- (guess+x/guess)/2
mysqrt <- function (x, guess = x/2, tol= .0001) {#
while (error >= tol) {#is error small enough?#
# if guess is correct, x/guess = guess, if not avg guess and check#
newguess <- (guess+x/guess)/2#
#
# calculate error between the squared product of #
error <- abs(x - newguess*newguess)#
#
guess <- newguess#
print(guess)#
}#
 return(guess)#
 }
mysqrt(9)
## ---- loaddata --------#
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
rawdata
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
skimr::skim(rawdata)
unique(rawdata$species)
na.omit(rawdata)
rawdata$pixels[rawdata$meas==10mm]
rawdata$pixels[rawdata$meas=="10mm"]
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"
data_location <- "../../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
data_location <- "../../Data/Raw_data/Raw_Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"
rawdata <- read.csv(data_location, check.names=FALSE)
head(rawdata)
skimr::skim(rawdata)
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
head(rawdate)
head(rawdata)
which( is.na(rawdata$BPBM) )
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas]
head(dat)
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
rawdata$BPBM
which( is.na(rawdata$BPBM) )
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA
dat <- rawdata[-nas] # exclude these rows
head(dat)
dat
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas,] # exclude these rows#
head(dat)
head(rawdata)
head(dat)
dat[,-meas]
extracols <- c(dat$meas, dat$number, dat$label, dat$mean, dat$min,dat$max, dat$angle, dat$length, dat$pixels)
extracols
dat2 <- dat[,-extracols]
extracols <- cbind(dat$meas, dat$number, dat$label, dat$mean, dat$min,dat$max, dat$angle, dat$length, dat$pixels)
dat2 <- dat[,-extracols]
extracols <- cbind(dat$genus, dat$species, dat$BPBM, dat$svl (mm), dat$finger width (mm),dat$toe width (mm), dat$f/t, dat$ant width (mm), dat$pos width (mm), dat$a/p)
extracols <- cbind(dat$genus, dat$species, dat$BPBM, dat$"svl (mm)", dat$"finger width (mm)",dat$"toe width (mm)", dat$f/t, dat$"ant width (mm)", dat$"pos width (mm)", dat$a/p)
dat2 <- dat[-c(5:13)]
dat2
head(dat2)
require(ggplot)
install.packages("ggplot")
require(ggplot2)
ggplot(dat2)
plot(dat2$SVL, dat2$f/t, scale_color_manual(genus))
dat2$f/t
dat2$"f/t"
plot(dat2$SVL, dat2$"f/t", scale_color_manual(genus))
plot(dat2$"svl (mm)", dat2$"f/t", scale_color_manual(genus))
plot(dat2$"svl (mm)", dat2$"f/t", scale_color_manual(dat2$genus))
class(dat2$"svl (mm)")
svl.vs.ft <- ggplot(dat2, aes(x = "svl (mm)", y = "f/t"))#
#
svl.vs.ft + #
  geom_point(aes(color = genus, shape = species), size = 2, alpha = 0.6)
svl.vs.ft <- ggplot(dat2, aes(x = "svl (mm)", y = "f/t"))#
#
svl.vs.ft + #
  geom_point(aes(color = genus, shape = species), size = 2)
ggplot(dat2, aes(x = "svl (mm)", y = "f/t"))
svl.vs.ft <- ggplot(dat2, aes(x = svl (mm), y = f/t))
svl.vs.ft + #
  geom_point(aes(color = genus, shape = species), size = 2)
ggplot(dat2, aes(x = "svl (mm)", y = "f/t"))
library(tidyverse)
ggplot(dat2, aes(x = "svl (mm)", y = "f/t"))
p <- ggplot(dat2, mapping = aes(x = Sepal.Length, y = Sepal.Width))
p
ggplot(dat2, mapping = aes(x = "svl (mm)", y = "f/t"))
p + geom_point()
p <- ggplot(dat2, mapping = aes(x = "svl (mm)", y = "f/t"))   #
p + geom_point()
install.packages("TDBook")
install.packages("TDbook")
my_ggtree <- my_ggtree %<+% new_data
require(ape)#
require(ggtree)#
require(treeio)
tree <- rtree(20)#
class(tree)
plot(tree)  # ape plotting function
ggtree(tree)  # ggtree plotting function
treeio::write.nexus(tree, file="tree.nex")#
treeio::write.tree(tree, file="tree.tree")#
list.files()
tree_nex <- treeio::read.nexus(file="tree.nex")#
tree_new <- treeio::read.newick(file="tree.tree")#
class(tree_nex)
as.phylo (tree)  # to phylo
as.treedata(tree) # to treedata
treedata <- as.treedata(tree)  #
as_tibble(treedata)  # to tibble
n <- length(taxa)#
size <- rnorm(n, mean=20, sd=5)#
habitat <- sample(c("desert", "grassland", "forest", "intertidal"), size=n, replace=T)#
dat <- data.frame( "label"= taxa, size, habitat)#
dat
taxa <- get_taxa_name(p)
ggtree(tree) + geom_tiplab()
p <- ggtree(tree) + geom_tiplab()#
get_taxa_name(p)
taxa <- get_taxa_name(p)
n <- length(taxa)#
size <- rnorm(n, mean=20, sd=5)#
habitat <- sample(c("desert", "grassland", "forest", "intertidal"), size=n, replace=T)#
dat <- data.frame( "label"= taxa, size, habitat)#
dat
as.treedata(p) %>% as_tibble %>% as.data.frame
ttree <- full_join(tree, dat, by = "label") #
ttree
ttree %>% as_tibble %>% as.data.frame
todrop <- paste("t", 1:10*2, sep="")#
todrop
smalltree <- drop.tip(ttree, todrop)#
smalltree
ggtree(smalltree) + geom_tiplab()
ggtree(smalltree) + #
    geom_tiplab() +#
    geom_text(aes(label=node), hjust=-.3)    # node numbers
ggtree(smalltree) + #
    geom_tiplab() +#
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers
ggtree(smalltree) + #
    geom_tiplab(aes(label=habitat)) +#
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3)    # node numbers
ggtree(smalltree) + #
    geom_tiplab(aes(label=habitat)) +#
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers#
    theme_tree2()
ggtree(smalltree) + #
    geom_tiplab(aes(label=habitat)) +#
    geom_text2(aes(label=node, subset=!isTip), hjust=-.3) +   # node numbers#
    theme_tree2() +#
    xlim(0,5)
require(cowplot)#
#
plot_grid(#
  ggtree(ttree),#
  ggtree(ttree, branch.length='none'),#
  ggtree(ttree, layout="dendrogram"),#
  ggtree(ttree, layout="roundrect"),#
  ggtree(ttree, layout="ellipse"),#
  ggtree(ttree, layout="ellipse", branch.length="none"),#
  ggtree(ttree, layout="circular"),#
  ggtree(ttree, branch.length='none', layout='circular'),#
  ggtree(ttree, layout="fan", open.angle=120),#
  ggtree(ttree, layout="inward_circular")#
)
require(ggplot2)#
require(dplyr)#
#
smdat <- smalltree %>% #
           as_tibble %>% #
           filter(!is.na(label)) %>%#
           relocate(label, .before=1)
ggtree(smalltree) + #
    geom_tiplab() +#
    theme_tree2()  + #
    geom_facet(panel = "Size", #
               data=smdat, #
               geom = geom_col, #
               mapping=aes(x = smdat$size), #
               orientation = 'y', #
               width = .6, #
               fill="blue")
my_ggtree <- my_ggtree %<+% new_data
require(ggtree)#
require(ggplot2)#
require(dplyr)#
require(TDbook)#
#
# load `tree_boots`, `df_tip_data`, and `df_inode_data` from 'TDbook'
p <- ggtree(tree_boots) %<+% df_tip_data + xlim(-.1, 4)#
p2 <- p + geom_tiplab(offset = .6, hjust = .5) +#
    geom_tippoint(aes(shape = trophic_habit, color = trophic_habit, #
                size = mass_in_kg)) + #
    theme(legend.position = "right") + #
    scale_size_continuous(range = c(3, 10))#
#
p2 %<+% df_inode_data + #
    geom_label(aes(label = vernacularName.y, fill = posterior)) + #
    scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, "YlGnBu"))
## load `tree_nwk`, `df_info`, `df_alleles`, and `df_bar_data` from 'TDbook'#
tree <- tree_nwk#
snps <- df_alleles#
snps_strainCols <- snps[1,] #
snps<-snps[-1,] # drop strain names#
colnames(snps) <- snps_strainCols#
#
gapChar <- "?"#
snp <- t(snps)  # not rectangular!#
lsnp <- apply(snp, 1, function(x) {#
        x != snp[1,] & x != gapChar & snp[1,] != gapChar#
    })  # different from row 1, not missing#
lsnp <- as.data.frame(lsnp) #
lsnp$pos <- as.numeric(rownames(lsnp))  # position from rownames#
lsnp <- tidyr::gather(lsnp, name, value, -pos)  #
snp_data <- lsnp[lsnp$value, c("name", "pos")] # only TRUEs
## visualize the tree #
p <- ggtree(tree) #
#
## attach the sampling information data set #
## and add symbols colored by location#
p <- p %<+% df_info + geom_tippoint(aes(color=location))#
p
